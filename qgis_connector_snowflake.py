# -*- coding: utf-8 -*-

"""
/***************************************************************************
 QGISConnectorSnowflake
                                 A QGIS plugin
 This plugin imports Snowflake spatial data as layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-07
        copyright            : (C) 2024 by Snowflake
        email                : erick.cuberojimenez@snowflake.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Snowflake"
__date__ = "2024-08-07"
__copyright__ = "(C) 2024 by Snowflake"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

import os
import sys
import inspect

from qgis.core import QgsProcessingAlgorithm, QgsApplication

from .qgis_connector_snowflake_algorithm import QGISConnectorSnowflakeAlgorithm

from .providers.sf_data_item_provider import SFDataItemProvider

from .providers.sf_source_select_provider import SFSourceSelectProvider
from .qgis_connector_snowflake_provider import QGISConnectorSnowflakeProvider
from .resources_rc import *
from qgis.gui import QgsGui

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)


class QGISConnectorSnowflakePlugin(object):
    def __init__(self):
        self.provider = None

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.postgis_native_provider = QgsApplication.processingRegistry().providerById(
            "native"
        )

        if self.postgis_native_provider:
            self.qgis_connector_snowflake_algorithm = QGISConnectorSnowflakeAlgorithm()
            self.postgis_native_provider.addAlgorithm(
                self.qgis_connector_snowflake_algorithm
            )

        self.tm = QgsApplication.taskManager()
        self.sf_source_select_provider = SFSourceSelectProvider("mssp")
        QgsGui.sourceSelectProviderRegistry().addProvider(
            self.sf_source_select_provider
        )

        self.sf_data_item_provider = SFDataItemProvider("dipk", "Snowflake")
        QgsApplication.dataItemProviderRegistry().addProvider(
            self.sf_data_item_provider
        )

        self.provider = QGISConnectorSnowflakeProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def initGui(self):
        self.initProcessing()

    def unload(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)
        self.postgis_native_provider.algorithms().remove(
            self.qgis_connector_snowflake_algorithm
        )
        self.postgis_native_provider.refreshAlgorithms()
        QgsGui.sourceSelectProviderRegistry().removeProvider(
            self.sf_source_select_provider
        )
        QgsApplication.dataItemProviderRegistry().removeProvider(
            self.sf_data_item_provider
        )
