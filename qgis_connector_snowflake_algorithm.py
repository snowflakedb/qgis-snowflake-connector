# -*- coding: utf-8 -*-

"""
/***************************************************************************
 QGISConnectorSnowflake
                                 A QGIS plugin
 This plugin imports Snowflake spatial data as layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-07
        copyright            : (C) 2024 by Snowflake
        email                : erick.cuberojimenez@snowflake.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Snowflake"
__date__ = "2024-08-07"
__copyright__ = "(C) 2024 by Snowflake"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

import json
from qgis.PyQt.QtCore import QCoreApplication, QByteArray
from qgis.core import (
    QgsProcessing,
    QgsProcessingAlgorithm,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterString,
)

from .entities.sf_dynamic_connection_combo_box_widget import (
    DynamicConnectionComboBoxWidget,
)

from .providers.sf_data_source_provider import SFDataProvider

from .helpers.utils import get_authentification_information, get_qsettings


class QGISConnectorSnowflakeAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    DATABASE = "DATABASE"
    OUTPUT = "OUTPUT"
    INPUT = "INPUT"
    FIRST_COMBO = "FIRST_COMBO"
    SECOND_COMBO = "SECOND_COMBO"
    CONNECTION_DYN_CB = "CONNECTION_DYN_CB"
    GEOMETRY_COLUMN = "GEOMETRY_COLUMN"

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.settings = get_qsettings()
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr("Input layer"),
                [QgsProcessing.TypeVectorAnyGeometry],
            )
        )

        param = QgsProcessingParameterString(
            self.CONNECTION_DYN_CB, "Connection (connection name)"
        )
        param.setMetadata(
            {"widget_wrapper": {"class": DynamicConnectionComboBoxWidget}}
        )
        self.addParameter(param)

        self.addParameter(
            QgsProcessingParameterString(
                self.GEOMETRY_COLUMN,
                "Geometry Column",
                defaultValue="",  # Optional default value
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        selected_connection, selected_database, selected_schema, selected_table = (
            json.loads(
                self.parameterAsString(parameters, self.CONNECTION_DYN_CB, context)
            )
        )
        geom_column = self.parameterAsString(parameters, self.GEOMETRY_COLUMN, context)

        auth_information = get_authentification_information(
            self.settings, selected_connection
        )
        self.sf_data_provider = SFDataProvider(auth_information)

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context)
        # (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
        #         context, source.fields(), source.wkbType(), source.sourceCrs())

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        features = source.getFeatures()

        query = f"INSERT INTO {selected_database}.{selected_schema}.{selected_table} ({geom_column}) VALUES "
        first = True
        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            byte_array = QByteArray(feature.geometry().asWkb())

            # Convert QByteArray to hexadecimal string
            hex_string = byte_array.toHex().data().decode()
            if first:
                first = False
            else:
                query += ","
            query += f"('{hex_string}')"

            # Update the progress bar
            feedback.setProgress(int(current * total))
        self.sf_data_provider.execute_query(query, selected_connection)

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        # return {self.OUTPUT: dest_id}
        return {}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "Export to Snowflake"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "Database"

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def createInstance(self):
        return QGISConnectorSnowflakeAlgorithm()
